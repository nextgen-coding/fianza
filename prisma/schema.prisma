// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management table
model User {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String   @unique
  full_name             String   @map("full_name")
  avatar_url            String?  @map("avatar_url")
  phone_number          String?  @map("phone_number")
  date_of_birth         DateTime? @map("date_of_birth") @db.Date
  preferred_language    String   @default("tn") @map("preferred_language")
  preferred_currency    String   @default("TND") @map("preferred_currency")
  cultural_preferences  Json     @default("{}") @map("cultural_preferences") @db.JsonB
  created_at            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  categories     Category[]
  transactions   Transaction[]
  budgets        Budget[]
  savings_goals  SavingsGoal[]
  debts          Debt[]
  notifications  Notification[]

  @@map("users")
}

// Categories for income and expense classification
model Category {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @map("user_id") @db.Uuid
  name_tn    String   @map("name_tn")
  name_ar    String?  @map("name_ar")
  name_fr    String?  @map("name_fr")
  name_en    String?  @map("name_en")
  icon       String
  type       CategoryType
  color      String   @default("#3B82F6")
  is_default Boolean  @default(false) @map("is_default")
  created_at DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user         User?         @relation(fields: [user_id], references: [id])
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

// Financial transactions (income, expense, transfer)
model Transaction {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String              @map("user_id") @db.Uuid
  category_id           String?             @map("category_id") @db.Uuid
  amount                Decimal             @db.Decimal
  type                  TransactionType
  description_tn        String?             @map("description_tn")
  description_ar        String?             @map("description_ar")
  description_fr        String?             @map("description_fr")
  description_en        String?             @map("description_en")
  payment_method        PaymentMethod?      @map("payment_method")
  location              String?
  recurring             Boolean             @default(false)
  recurring_frequency   RecurringFrequency? @map("recurring_frequency")
  tags                  String[]            @default([])
  currency              String              @default("TND")
  transaction_date      DateTime            @default(dbgenerated("CURRENT_DATE")) @map("transaction_date") @db.Date
  created_at            DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at            DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user     User      @relation(fields: [user_id], references: [id])
  category Category? @relation(fields: [category_id], references: [id])

  @@map("transactions")
}

// Budget management for spending control
model Budget {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String      @map("user_id") @db.Uuid
  category_id      String?     @map("category_id") @db.Uuid
  name_tn          String      @map("name_tn")
  name_ar          String?     @map("name_ar")
  name_fr          String?     @map("name_fr")
  name_en          String?     @map("name_en")
  amount           Decimal     @db.Decimal
  period           BudgetPeriod
  start_date       DateTime    @map("start_date") @db.Date
  end_date         DateTime    @map("end_date") @db.Date
  currency         String      @default("TND")
  spent_amount     Decimal?    @default(0) @map("spent_amount") @db.Decimal
  alert_threshold  Decimal?    @default(0.80) @map("alert_threshold") @db.Decimal
  is_active        Boolean     @default(true) @map("is_active")
  created_at       DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at       DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user     User      @relation(fields: [user_id], references: [id])
  category Category? @relation(fields: [category_id], references: [id])

  @@map("budgets")
}

// Savings goals and achievement tracking
model SavingsGoal {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String              @map("user_id") @db.Uuid
  title_tn             String              @map("title_tn")
  title_ar             String?             @map("title_ar")
  title_fr             String?             @map("title_fr")
  title_en             String?             @map("title_en")
  description_tn       String?             @map("description_tn")
  description_ar       String?             @map("description_ar")
  description_fr       String?             @map("description_fr")
  description_en       String?             @map("description_en")
  target_amount        Decimal             @map("target_amount") @db.Decimal
  current_amount       Decimal             @default(0) @map("current_amount") @db.Decimal
  target_date          DateTime?           @map("target_date") @db.Date
  achievement_date     DateTime?           @map("achievement_date") @db.Date
  currency             String              @default("TND")
  priority             Priority            @default(medium)
  icon                 String              @default("ðŸŽ¯")
  color                String              @default("#10B981")
  is_achieved          Boolean             @default(false) @map("is_achieved")
  auto_save_amount     Decimal?            @default(0) @map("auto_save_amount") @db.Decimal
  auto_save_frequency  RecurringFrequency? @map("auto_save_frequency")
  created_at           DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at           DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("savings_goals")
}

// Debt tracking and management
model Debt {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String              @map("user_id") @db.Uuid
  creditor_name       String              @map("creditor_name")
  debtor_name         String?             @map("debtor_name")
  debt_type           DebtType            @map("debt_type")
  original_amount     Decimal             @map("original_amount") @db.Decimal
  remaining_amount    Decimal             @map("remaining_amount") @db.Decimal
  currency            String              @default("TND")
  interest_rate       Decimal?            @default(0) @map("interest_rate") @db.Decimal
  payment_frequency   RecurringFrequency? @map("payment_frequency")
  next_payment_date   DateTime?           @map("next_payment_date") @db.Date
  due_date            DateTime?           @map("due_date") @db.Date
  settlement_date     DateTime?           @map("settlement_date") @db.Date
  minimum_payment     Decimal?            @default(0) @map("minimum_payment") @db.Decimal
  description_tn      String?             @map("description_tn")
  description_ar      String?             @map("description_ar")
  description_fr      String?             @map("description_fr")
  description_en      String?             @map("description_en")
  is_settled          Boolean             @default(false) @map("is_settled")
  priority            Priority            @default(medium)
  created_at          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updated_at          DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("debts")
}

// Smart notifications system
model Notification {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String           @map("user_id") @db.Uuid
  type            NotificationType
  title_tn        String           @map("title_tn")
  title_ar        String?          @map("title_ar")
  title_fr        String?          @map("title_fr")
  title_en        String?          @map("title_en")
  message_tn      String           @map("message_tn")
  message_ar      String?          @map("message_ar")
  message_fr      String?          @map("message_fr")
  message_en      String?          @map("message_en")
  priority        Priority         @default(medium)
  is_read         Boolean          @default(false) @map("is_read")
  action_required Boolean          @default(false) @map("action_required")
  action_url      String?          @map("action_url")
  scheduled_for   DateTime         @default(now()) @map("scheduled_for") @db.Timestamptz(6)
  sent_at         DateTime?        @map("sent_at") @db.Timestamptz(6)
  metadata        Json             @default("{}") @db.JsonB
  created_at      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

// Enums for type safety
enum CategoryType {
  income
  expense

  @@map("category_type")
}

enum TransactionType {
  income
  expense
  transfer

  @@map("transaction_type")
}

enum PaymentMethod {
  cash
  card
  bank_transfer
  mobile_payment
  check

  @@map("payment_method")
}

enum RecurringFrequency {
  daily
  weekly
  monthly
  quarterly
  yearly
  one_time

  @@map("recurring_frequency")
}

enum BudgetPeriod {
  weekly
  monthly
  quarterly
  yearly

  @@map("budget_period")
}

enum DebtType {
  owed_to_me
  i_owe
  loan
  credit_card

  @@map("debt_type")
}

enum Priority {
  low
  medium
  high

  @@map("priority")
}

enum NotificationType {
  budget_alert
  payment_reminder
  goal_milestone
  debt_due
  financial_tip
  achievement

  @@map("notification_type")
}
